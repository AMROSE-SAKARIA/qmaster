import { useState, useEffect } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';

function Teacher() {
  const [pdf, setPdf] = useState(null);
  const [textContent, setTextContent] = useState('');
  const [numMCQs, setNumMCQs] = useState(10);
  const [numDescriptive, setNumDescriptive] = useState(5);
  const [mcqMarks, setMcqMarks] = useState(2);
  const [descriptiveMarks, setDescriptiveMarks] = useState(10);
  const [token, setToken] = useState('');
  const [questions, setQuestions] = useState({ mcqs: [], descriptive: [] });
  const [selectedMCQs, setSelectedMCQs] = useState([]);
  const [selectedDescriptive, setSelectedDescriptive] = useState([]);
  const navigate = useNavigate();

  const handleUpload = async () => {
    const formData = new FormData();
    if (pdf) formData.append('pdf', pdf);
    formData.append('textContent', textContent);
    formData.append('numMCQs', numMCQs);
    formData.append('numDescriptive', numDescriptive);
    formData.append('mcqMarks', mcqMarks);
    formData.append('descriptiveMarks', descriptiveMarks);

    try {
      const res = await axios.post('http://localhost:5000/upload-content', formData, {
        headers: { Authorization: localStorage.getItem('token') },
      });
      setToken(res.data.token);
      alert('Content uploaded! Token: ' + res.data.token);
    } catch (error) {
      alert('Upload failed: ' + (error.response?.data.error || error.message));
    }
  };

  const fetchQuestions = async () => {
    try {
      const res = await axios.get(`http://localhost:5000/teacher/questions/${token}`, {
        headers: { Authorization: localStorage.getItem('token') },
      });
      setQuestions(res.data);
    } catch (error) {
      alert('Failed to fetch questions: ' + (error.response?.data.error || error.message));
    }
  };

  const handleCreateTest = async () => {
    try {
      await axios.post('http://localhost:5000/teacher/create-test', {
        token,
        selectedMCQs,
        selectedDescriptive,
      }, {
        headers: { Authorization: localStorage.getItem('token') },
      });
      alert('Test created! Share token with students: ' + token);
    } catch (error) {
      alert('Failed to create test: ' + (error.response?.data.error || error.message));
    }
  };

  return (
    <div className="p-6">
      <h2 className="text-2xl font-bold mb-4">Teacher Dashboard</h2>
      <div className="mb-4">
        <label>Upload PDF (for Descriptive Questions):</label>
        <input type="file" accept="application/pdf" onChange={(e) => setPdf(e.target.files[0])} className="border p-2" />
      </div>
      <div className="mb-4">
        <label>Text Content (for MCQs, max 3000 words):</label>
        <textarea
          value={textContent}
          onChange={(e) => setTextContent(e.target.value)}
          className="border p-2 w-full h-40"
          maxLength={3000 * 5} // Approx 3000 words
        />
      </div>
      <div className="mb-4">
        <label>Number of MCQs:</label>
        <input type="number" value={numMCQs} onChange={(e) => setNumMCQs(e.target.value)} className="border p-2" />
      </div>
      <div className="mb-4">
        <label>Number of Descriptive Questions:</label>
        <input type="number" value={numDescriptive} onChange={(e) => setNumDescriptive(e.target.value)} className="border p-2" />
      </div>
      <div className="mb-4">
        <label>Marks per MCQ:</label>
        <input type="number" value={mcqMarks} onChange={(e) => setMcqMarks(e.target.value)} className="border p-2" />
      </div>
      <div className="mb-4">
        <label>Marks per Descriptive:</label>
        <input type="number" value={descriptiveMarks} onChange={(e) => setDescriptiveMarks(e.target.value)} className="border p-2" />
      </div>
      <button onClick={handleUpload} className="bg-blue-500 text-white p-2 rounded">Upload Content</button>

      {token && (
        <>
          <div className="mt-4">
            <button onClick={fetchQuestions} className="bg-green-500 text-white p-2 rounded">View Generated Questions</button>
          </div>
          <div className="mt-4">
            <h3>MCQs</h3>
            {questions.mcqs.map((q, i) => (
              <div key={q._id}>
                <input type="checkbox" onChange={(e) => {
                  if (e.target.checked) setSelectedMCQs([...selectedMCQs, q._id]);
                  else setSelectedMCQs(selectedMCQs.filter(id => id !== q._id));
                }} />
                <span>{q.question}</span>
              </div>
            ))}
            <h3>Descriptive Questions</h3>
            {questions.descriptive.map((q, i) => (
              <div key={q._id}>
                <input type="checkbox" onChange={(e) => {
                  if (e.target.checked) setSelectedDescriptive([...selectedDescriptive, q._id]);
                  else setSelectedDescriptive(selectedDescriptive.filter(id => id !== q._id));
                }} />
                <span>{q.question}</span>
              </div>
            ))}
            <button onClick={handleCreateTest} className="bg-purple-500 text-white p-2 rounded mt-4">Create Test</button>
          </div>
        </>
      )}
    </div>
  );
}

export default Teacher;